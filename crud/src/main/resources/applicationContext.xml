<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

<!-- spring配置文件，负责处理所有业务逻辑 -->
	<context:component-scan base-package="cn.hsu">
     <!-- 除了不扫描控制器，其余均要扫描 -->
     	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
     </context:component-scan>
<!-- SpringMVC配置文件，包含网站跳转逻辑的控制配置 -->
	<context:component-scan base-package="cn.hsu" use-default-filters="false">
	<!-- 只扫描控制器 -->
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	<!-- 配置视图解析器，页面返回 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	<!-- 两个标准配置 -->
	<!-- 将springmvc不能处理的请求交给Tomcat -->
	<mvc:default-servlet-handler/>
	<!-- 能支持springmvc更高级的一些功能，比如JSR303校验，快捷的ajax...映射动态请求 -->
	<mvc:annotation-driven/>
<!-- ===========================数据源===========================-->	
     <context:property-placeholder location="classpath:dbconfig.properties"/>
     
     <bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
     	<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
     	<property name="driverClass" value="${jdbc.driverClass}"></property>
     	<property name="user" value="${jdbc.user}"></property>
     	<property name="password" value="${jdbc.password}"></property>
     </bean>
<!-- ==================================================================== -->

<!-- =============================配置和Mybatis的整合===================== -->
     <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
     <!-- 指定Mybatis全局配置文件的路径 -->
     	<property name="configLocation" value="classpath:mybatis-config.xml"></property>
     	<property name="dataSource" ref="pooledDataSource"></property>
     	<!-- 指定Mybatis，mapper配置文件的路径 -->
     	<property name="mapperLocations">
			<array>
				<value>classpath:*Mapper.xml</value>
			</array>
		</property>
     </bean>
     <!-- 配置扫描器，将Mybatis接口的实现加入到IOC容器中 -->
     <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
     	<!-- 扫描所有dao接口的实现加入到IOC容器中 -->
     	<property name="basePackage" value="cn.hsu.crud.dao"></property>
     </bean>
     <!-- 配置一个可以执行批量的sqlSession -->
     <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
     	<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
     	<constructor-arg name="executorType" value="BATCH"></constructor-arg>
     </bean>
     
     <!-- =====================事务控制的配置=================================== -->
     <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
     	<!-- 控制数据源 -->
     	<property name="dataSource" ref="pooledDataSource"></property>
     </bean>

     <!-- 开启基于注解的事务，使用xml配置的形式的注解（主要的都是使用配置式） -->
     <aop:config>
     <!-- 切入点表达式 -->
     	<aop:pointcut expression="execution(* cn.hsu.crud.service..*(..))" id="txPoint"/>
     	<!-- 配置事务增强 -->
     	<aop:advisor advice-ref="txAdvise" pointcut-ref="txPoint"/>
     </aop:config>
     <!-- 配置事务增强，事务如何切入 -->
     <tx:advice id="txAdvise" transaction-manager="transactionManager">
     	<tx:attributes>
     		<!-- 所有方法都是事务方法 -->
     		<tx:method name="*"/>
     		<!-- 以get开头的方法都是事务方法，一般这样的方法都是查询，为了调优，设置read-only="true" -->
     		<tx:method name="get*" read-only="true"/>
     	</tx:attributes>
     </tx:advice>
     
     <!-- Spring配置的核心（数据源、与Mybatis的整合、事务控制） -->
</beans>
